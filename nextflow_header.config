// Add for each process an option to change the parameters. Default is the set params
params.nproc = 20 //* @input @description:"How many processes to use for each step. Default 1"

// Process Parameters for Mask_Primer_MaskPrimers:
params.Mask_Primer_MaskPrimers.method = ["score","score"]
params.Mask_Primer_MaskPrimers.mode = ["cut","cut"]
params.Mask_Primer_MaskPrimers.start = [0,17]
params.Mask_Primer_MaskPrimers.umi_length = [0,0]
params.Mask_Primer_MaskPrimers.barcode = ["false","true"]
params.Mask_Primer_MaskPrimers.maxerror = [0.2,0.2]
params.Mask_Primer_MaskPrimers.revpr = ["false","false"]
params.Mask_Primer_MaskPrimers.maxlen = [30,50]
params.Mask_Primer_MaskPrimers.skiprc = ["false","false"]
params.Mask_Primer_MaskPrimers.failed = "true"
params.Mask_Primer_MaskPrimers.nproc = params.nproc
params.Mask_Primer_MaskPrimers.R1_primers = "${projectDir}/primers/Primers.IGHC_R1.no_ambig.fasta"
params.Mask_Primer_MaskPrimers.R2_primers = "${projectDir}/primers/primers.V3_R2_TS-shift.fasta"

// Process Parameters for params.Filter_Sequence_Quality_filter_seq_quality:
params.Filter_Sequence_Quality_filter_seq_quality.method = "quality"
params.Filter_Sequence_Quality_filter_seq_quality.nproc = params.nproc
params.Filter_Sequence_Quality_filter_seq_quality.q = "5"

// Process Parameters for params.Align_Sets_align_sets:
params.Align_Sets_align_sets.method = "muscle"
params.Align_Sets_align_sets.bf = "BARCODE"
params.Align_Sets_align_sets.div = "false"
params.Align_Sets_align_sets.failed = "false"
params.Align_Sets_align_sets.nproc = params.nproc
params.Align_Sets_align_sets.muscle_exec = "/usr/local/bin/muscle"
params.Align_Sets_align_sets.offset_table = ""
params.Align_Sets_align_sets.pf = ""
params.Align_Sets_align_sets.mode = ""
params.Align_Sets_align_sets.primer_file = ""
params.Align_Sets_align_sets.reverse = "false"

// Process Parameters for params.Align_Sets_parse_log_AS:
params.Align_Sets_parse_log_AS.field_to_parse = "ID BARCODE SEQCOUNT  ERROR "
// Process Parameters for params.Build_Consensus_build_consensus:
params.Build_Consensus_build_consensus.failed = "true"
params.Build_Consensus_build_consensus.nproc = params.nproc
params.Build_Consensus_build_consensus.barcode_field = ["BARCODE","BARCODE"]
params.Build_Consensus_build_consensus.primer_field = ["PRIMER","PRIMER"]
params.Build_Consensus_build_consensus.act = ["none","none"]
params.Build_Consensus_build_consensus.copy_field = ["",""]
params.Build_Consensus_build_consensus.mincount = [1,1]
params.Build_Consensus_build_consensus.minqual = [0,0]
params.Build_Consensus_build_consensus.minfreq = [0.6,0.6]
params.Build_Consensus_build_consensus.maxerror = ["0.1","0.1"]
params.Build_Consensus_build_consensus.prcons = ["0.6","0.6"]
params.Build_Consensus_build_consensus.maxgap = ["none","none"]
params.Build_Consensus_build_consensus.maxdiv = ["none","none"]
params.Build_Consensus_build_consensus.dep = ["false","false"]

// Process Parameters for params.Assemble_pairs_assemble_pairs:
params.Assemble_pairs_align_assemble_pairs.method = "align"
params.Assemble_pairs_align_assemble_pairs.coord = "presto"
params.Assemble_pairs_align_assemble_pairs.rc = "tail"
params.Assemble_pairs_align_assemble_pairs.head_fields_R1 = ""
params.Assemble_pairs_align_assemble_pairs.head_fields_R2 = "CONSCOUNT PRCONS"
params.Assemble_pairs_align_assemble_pairs.failed = "true"
params.Assemble_pairs_align_assemble_pairs.fasta = "false"
params.Assemble_pairs_align_assemble_pairs.nproc = params.nproc
params.Assemble_pairs_align_assemble_pairs.alpha = 0.00001
params.Assemble_pairs_align_assemble_pairs.maxerror = 0.3
params.Assemble_pairs_align_assemble_pairs.minlen = 8
params.Assemble_pairs_align_assemble_pairs.maxlen = 1000
params.Assemble_pairs_align_assemble_pairs.scanrev = "true"
params.Assemble_pairs_align_assemble_pairs.minident = 0.5
params.Assemble_pairs_align_assemble_pairs.evalue = 0.00001
params.Assemble_pairs_align_assemble_pairs.maxhits = 100
params.Assemble_pairs_align_assemble_pairs.fill = "false"
params.Assemble_pairs_align_assemble_pairs.gap = 0
params.Assemble_pairs_align_assemble_pairs.head_seqeunce_file="R2"

// Process Parameters for params.Assemble_pairs_assemble_pairs:
params.Assemble_pairs_reference_assemble_pairs.method = "reference"
params.Assemble_pairs_reference_assemble_pairs.coord = "presto"
params.Assemble_pairs_reference_assemble_pairs.rc = "tail"
params.Assemble_pairs_reference_assemble_pairs.head_fields_R1 = ""
params.Assemble_pairs_reference_assemble_pairs.head_fields_R2 = "CONSCOUNT PRCONS"
params.Assemble_pairs_reference_assemble_pairs.failed = "true"
params.Assemble_pairs_reference_assemble_pairs.fasta = "false"
params.Assemble_pairs_reference_assemble_pairs.nproc = params.nproc
params.Assemble_pairs_reference_assemble_pairs.aligner = "usearch"
params.Assemble_pairs_reference_assemble_pairs.usearch_version="11.0.667"
params.Assemble_pairs_reference_assemble_pairs.assemble_reference="${projectDir}/reference/humanIGH_w_gaps/human_gl_IGHV_F+ORF+in-frame_P_w_gaps.fasta"
params.Assemble_pairs_reference_assemble_pairs.head_seqeunce_file="R2"

params.Assemble_pairs_reference_parse_log_AP.field_to_parse = "ID REFID LENGTH OVERLAP GAP ERROR IDENTITY PVALUE EVALUE1 EVALUE2"
params.Assemble_pairs_align_parse_log_AP.field_to_parse = "ID REFID LENGTH OVERLAP GAP ERROR IDENTITY PVALUE EVALUE1 EVALUE2"


params.Mask_Primer_C_region_MaskPrimers.method = ["align"]
params.Mask_Primer_C_region_MaskPrimers.mode = ["tag"]
params.Mask_Primer_C_region_MaskPrimers.barcode = ["false"]
params.Mask_Primer_C_region_MaskPrimers.maxerror = [0.4]
params.Mask_Primer_C_region_MaskPrimers.revpr = ["false"]
params.Mask_Primer_C_region_MaskPrimers.maxlen = [100]
params.Mask_Primer_C_region_MaskPrimers.skiprc = ["false"]
params.Mask_Primer_C_region_MaskPrimers.failed = "true"
params.Mask_Primer_C_region_MaskPrimers.nproc = params.nproc
params.Mask_Primer_C_region_MaskPrimers.R1_primers = "${projectDir}/primers/CRegion.fasta"


// Process Parameters for filter_seq_maskqual:
params.filter_seq_maskqual.method = "maskqual" 
params.filter_seq_maskqual.nproc = params.nproc
params.filter_seq_maskqual.q = "10" 
params.filter_seq_maskqual.n_length = "" 
params.filter_seq_maskqual.n_missing = "" 
params.filter_seq_maskqual.fasta = "false" 

// Process Parameters for filter_seq_missing:
params.filter_seq_missing.method = "missing" 
params.filter_seq_missing.nproc = params.nproc 
params.filter_seq_missing.q = "" 
params.filter_seq_missing.n_length = "" 
params.filter_seq_missing.n_missing = "10" 
params.filter_seq_missing.fasta = "false" 

// Process Parameters for parse_headers:
params.parse_headers.method = "collapse" 
params.parse_headers.act = "min" 
params.parse_headers.args = "-f CONSCOUNT" 

// Process Parameters for collapse_seq:
params.collapse_seq.max_missing = 10 
params.collapse_seq.inner = "true" 
params.collapse_seq.fasta = "true" 
params.collapse_seq.act = "sum" 
params.collapse_seq.uf = "PRCONS" 
params.collapse_seq.cf = "CONSCOUNT" 
params.collapse_seq.nproc = params.nproc
params.collapse_seq.failed = "true" 

// Process Parameters for parse_headers:
params.parse_headers_table.method = "table" 
params.parse_headers_table.act = "none" 
params.parse_headers_table.args = "-f PRCONS CONSCOUNT DUPCOUNT" 
